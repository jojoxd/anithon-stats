// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: test_repository.sql

package gen

import (
	"context"
	"database/sql"
)

const createTest = `-- name: CreateTest :execresult
INSERT INTO test (
    test
) VALUES (
    $1
)
`

func (q *Queries) CreateTest(ctx context.Context, test sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTest, test)
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM test
WHERE
    id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTest, id)
	return err
}

const getTest = `-- name: GetTest :one
SELECT 
    id, test
FROM test
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetTest(ctx context.Context, id int32) (Test, error) {
	row := q.db.QueryRowContext(ctx, getTest, id)
	var i Test
	err := row.Scan(&i.ID, &i.Test)
	return i, err
}

const listTest = `-- name: ListTest :many
SELECT
    id, test
FROM test
ORDER BY id
`

func (q *Queries) ListTest(ctx context.Context) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, listTest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(&i.ID, &i.Test); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
