// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createActivity = `-- name: CreateActivity :exec
INSERT INTO activities
    (id, discriminator, user_id)
VALUES
    ($1, $2, $3)
`

type CreateActivityParams struct {
	Id            uuid.UUID
	Discriminator string
	UserID        uuid.UUID
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) error {
	_, err := q.db.ExecContext(ctx, createActivity, arg.Id, arg.Discriminator, arg.UserID)
	return err
}

const createActivityMessage = `-- name: CreateActivityMessage :exec
INSERT INTO activity_messages
    (id, activity_id, author_id, message)
VALUES
    ($1, $2, $3, $4)
`

type CreateActivityMessageParams struct {
	Id         uuid.UUID
	ActivityID uuid.UUID
	AuthorID   uuid.UUID
	Message    string
}

func (q *Queries) CreateActivityMessage(ctx context.Context, arg CreateActivityMessageParams) error {
	_, err := q.db.ExecContext(ctx, createActivityMessage,
		arg.Id,
		arg.ActivityID,
		arg.AuthorID,
		arg.Message,
	)
	return err
}

const createListActivity = `-- name: CreateListActivity :exec
INSERT INTO list_activities
    (activity_id, list_id, type)
VALUES
    ($1, $2, $3)
`

type CreateListActivityParams struct {
	ActivityID uuid.UUID
	ListID     uuid.UUID
	Type       string
}

func (q *Queries) CreateListActivity(ctx context.Context, arg CreateListActivityParams) error {
	_, err := q.db.ExecContext(ctx, createListActivity, arg.ActivityID, arg.ListID, arg.Type)
	return err
}

const createListEntryActivity = `-- name: CreateListEntryActivity :exec
INSERT INTO list_entry_activities
(activity_id, list_entry_id, type)
VALUES
    ($1, $2, $3)
`

type CreateListEntryActivityParams struct {
	ActivityID  uuid.UUID
	ListEntryID uuid.UUID
	Type        string
}

func (q *Queries) CreateListEntryActivity(ctx context.Context, arg CreateListEntryActivityParams) error {
	_, err := q.db.ExecContext(ctx, createListEntryActivity, arg.ActivityID, arg.ListEntryID, arg.Type)
	return err
}

const createUserActivity = `-- name: CreateUserActivity :exec
INSERT INTO user_activities
    (activity_id, type)
VALUES
    ($1, $2)
`

type CreateUserActivityParams struct {
	ActivityID uuid.UUID
	Type       string
}

func (q *Queries) CreateUserActivity(ctx context.Context, arg CreateUserActivityParams) error {
	_, err := q.db.ExecContext(ctx, createUserActivity, arg.ActivityID, arg.Type)
	return err
}

const deleteActivitiesForUser = `-- name: DeleteActivitiesForUser :exec
DELETE FROM activities a
WHERE
    a.user_id = $1
`

func (q *Queries) DeleteActivitiesForUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivitiesForUser, userID)
	return err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities a
WHERE
    a.id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const deleteActivityMessage = `-- name: DeleteActivityMessage :exec
DELETE FROM activity_messages am
WHERE
    am.id = $1
`

func (q *Queries) DeleteActivityMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivityMessage, id)
	return err
}

const deleteActivityMessagesForUser = `-- name: DeleteActivityMessagesForUser :exec
DELETE FROM activity_messages am
WHERE
    am.author_id = $1
`

func (q *Queries) DeleteActivityMessagesForUser(ctx context.Context, authorID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivityMessagesForUser, authorID)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT
    a.id, a.discriminator, a.user_id, a.created_at,
    COALESCE(
        la.type,
        lea.type,
        ua.type
    )                   AS type,
    la.list_id          AS list_id,
    lea.list_entry_id   AS list_entry_id
FROM activities a
LEFT JOIN list_activities la
    ON la.activity_id = a.id
        AND a.discriminator = 'list'
LEFT JOIN list_entry_activities lea
    ON lea.activity_id = a.id
        AND a.discriminator = 'list_entry'
LEFT JOIN user_activities ua
    ON ua.activity_id = a.id
        AND a.discriminator = 'user'
WHERE
    a.id = $1
`

type GetActivityRow struct {
	Id            uuid.UUID
	Discriminator string
	UserID        uuid.UUID
	CreatedAt     time.Time
	Type          string
	ListID        uuid.NullUUID
	ListEntryID   uuid.NullUUID
}

func (q *Queries) GetActivity(ctx context.Context, id uuid.UUID) (GetActivityRow, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i GetActivityRow
	err := row.Scan(
		&i.Id,
		&i.Discriminator,
		&i.UserID,
		&i.CreatedAt,
		&i.Type,
		&i.ListID,
		&i.ListEntryID,
	)
	return i, err
}

const getActivityMessage = `-- name: GetActivityMessage :one
SELECT
    am.id, am.activity_id, am.author_id, am.message, am.created_at, am.updated_at
FROM activity_messages am
WHERE
    am.id = $1
`

func (q *Queries) GetActivityMessage(ctx context.Context, id uuid.UUID) (ActivityMessage, error) {
	row := q.db.QueryRowContext(ctx, getActivityMessage, id)
	var i ActivityMessage
	err := row.Scan(
		&i.Id,
		&i.ActivityID,
		&i.AuthorID,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActivityMessageForUser = `-- name: ListActivityMessageForUser :many
SELECT
    am.id, am.activity_id, am.author_id, am.message, am.created_at, am.updated_at
FROM activity_messages am
WHERE
    am.author_id = $1
`

func (q *Queries) ListActivityMessageForUser(ctx context.Context, authorID uuid.UUID) ([]ActivityMessage, error) {
	rows, err := q.db.QueryContext(ctx, listActivityMessageForUser, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActivityMessage
	for rows.Next() {
		var i ActivityMessage
		if err := rows.Scan(
			&i.Id,
			&i.ActivityID,
			&i.AuthorID,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivityMessage = `-- name: UpdateActivityMessage :exec
UPDATE activity_messages am
SET
    message = $2
WHERE
    am.id = $1
`

type UpdateActivityMessageParams struct {
	Id      uuid.UUID
	Message string
}

func (q *Queries) UpdateActivityMessage(ctx context.Context, arg UpdateActivityMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateActivityMessage, arg.Id, arg.Message)
	return err
}
