{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/generated/types.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: fetchUserLists\n// ====================================================\n\nexport interface fetchUserLists_MediaListCollection_user {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_startedAt {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_completedAt {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_coverImage {\n  __typename: \"MediaCoverImage\";\n  /**\n   * The cover image url of the media at a large size\n   */\n  large: string | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_startDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_endDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_relations_edges_node_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_relations_edges_node {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: fetchUserLists_MediaListCollection_lists_entries_media_relations_edges_node_title | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_relations_edges {\n  __typename: \"MediaEdge\";\n  /**\n   * The type of relation to the parent model\n   */\n  relationType: MediaRelation | null;\n  node: fetchUserLists_MediaListCollection_lists_entries_media_relations_edges_node | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media_relations {\n  __typename: \"MediaConnection\";\n  edges: (fetchUserLists_MediaListCollection_lists_entries_media_relations_edges | null)[] | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries_media {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The current releasing status of the media\n   */\n  status: MediaStatus | null;\n  /**\n   * The format the media was released in\n   */\n  format: MediaFormat | null;\n  /**\n   * The amount of episodes the anime has when complete\n   */\n  episodes: number | null;\n  /**\n   * The general length of each anime episode in minutes\n   */\n  duration: number | null;\n  /**\n   * Short description of the media's story and characters\n   */\n  description: string | null;\n  /**\n   * The cover images of the media\n   */\n  coverImage: fetchUserLists_MediaListCollection_lists_entries_media_coverImage | null;\n  /**\n   * The first official release date of the media\n   */\n  startDate: fetchUserLists_MediaListCollection_lists_entries_media_startDate | null;\n  /**\n   * The last official release date of the media\n   */\n  endDate: fetchUserLists_MediaListCollection_lists_entries_media_endDate | null;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: fetchUserLists_MediaListCollection_lists_entries_media_title | null;\n  /**\n   * Other media in the same or connecting franchise\n   */\n  relations: fetchUserLists_MediaListCollection_lists_entries_media_relations | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists_entries {\n  __typename: \"MediaList\";\n  /**\n   * The id of the list entry\n   */\n  id: number;\n  /**\n   * The watching/reading status\n   */\n  status: MediaListStatus | null;\n  /**\n   * Text notes\n   */\n  notes: string | null;\n  /**\n   * The amount of episodes/chapters consumed by the user\n   */\n  progress: number | null;\n  /**\n   * When the entry was started by the user\n   */\n  startedAt: fetchUserLists_MediaListCollection_lists_entries_startedAt | null;\n  /**\n   * When the entry was completed by the user\n   */\n  completedAt: fetchUserLists_MediaListCollection_lists_entries_completedAt | null;\n  media: fetchUserLists_MediaListCollection_lists_entries_media | null;\n}\n\nexport interface fetchUserLists_MediaListCollection_lists {\n  __typename: \"MediaListGroup\";\n  name: string | null;\n  /**\n   * Media list entries\n   */\n  entries: (fetchUserLists_MediaListCollection_lists_entries | null)[] | null;\n}\n\nexport interface fetchUserLists_MediaListCollection {\n  __typename: \"MediaListCollection\";\n  /**\n   * The owner of the list\n   */\n  user: fetchUserLists_MediaListCollection_user | null;\n  /**\n   * Grouped media list entries\n   */\n  lists: (fetchUserLists_MediaListCollection_lists | null)[] | null;\n}\n\nexport interface fetchUserLists {\n  /**\n   * Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.\n   */\n  MediaListCollection: fetchUserLists_MediaListCollection | null;\n}\n\nexport interface fetchUserListsVariables {\n  userId: number;\n  type: MediaType;\n  statuses: MediaListStatus[];\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: findUsersByName\n// ====================================================\n\nexport interface findUsersByName_Page_users_avatar {\n  __typename: \"UserAvatar\";\n  /**\n   * The avatar of user at its largest size\n   */\n  large: string | null;\n  /**\n   * The avatar of user at medium size\n   */\n  medium: string | null;\n}\n\nexport interface findUsersByName_Page_users {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n  /**\n   * The name of the user\n   */\n  name: string;\n  /**\n   * The user's avatar images\n   */\n  avatar: findUsersByName_Page_users_avatar | null;\n  /**\n   * The user's banner images\n   */\n  bannerImage: string | null;\n}\n\nexport interface findUsersByName_Page {\n  __typename: \"Page\";\n  users: (findUsersByName_Page_users | null)[] | null;\n}\n\nexport interface findUsersByName {\n  Page: findUsersByName_Page | null;\n}\n\nexport interface findUsersByNameVariables {\n  query: string;\n  page: number;\n  perPage: number;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: getCurrentUser\n// ====================================================\n\nexport interface getCurrentUser_Viewer_avatar {\n  __typename: \"UserAvatar\";\n  /**\n   * The avatar of user at its largest size\n   */\n  large: string | null;\n  /**\n   * The avatar of user at medium size\n   */\n  medium: string | null;\n}\n\nexport interface getCurrentUser_Viewer {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n  /**\n   * The name of the user\n   */\n  name: string;\n  /**\n   * The user's avatar images\n   */\n  avatar: getCurrentUser_Viewer_avatar | null;\n}\n\nexport interface getCurrentUser {\n  /**\n   * Get the currently authenticated user\n   */\n  Viewer: getCurrentUser_Viewer | null;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: getListsContainingMediaId\n// ====================================================\n\nexport interface getListsContainingMediaId_MediaList {\n  __typename: \"MediaList\";\n  /**\n   * Map of booleans for which custom lists the entry are in\n   */\n  customLists: any | null;\n}\n\nexport interface getListsContainingMediaId {\n  /**\n   * Media list query\n   */\n  MediaList: getListsContainingMediaId_MediaList | null;\n}\n\nexport interface getListsContainingMediaIdVariables {\n  mediaId: number;\n  userId: number;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: getUserById\n// ====================================================\n\nexport interface getUserById_User_avatar {\n  __typename: \"UserAvatar\";\n  /**\n   * The avatar of user at its largest size\n   */\n  large: string | null;\n  /**\n   * The avatar of user at medium size\n   */\n  medium: string | null;\n}\n\nexport interface getUserById_User {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n  /**\n   * The name of the user\n   */\n  name: string;\n  /**\n   * The user's avatar images\n   */\n  avatar: getUserById_User_avatar | null;\n  /**\n   * The user's banner images\n   */\n  bannerImage: string | null;\n}\n\nexport interface getUserById {\n  /**\n   * User query\n   */\n  User: getUserById_User | null;\n}\n\nexport interface getUserByIdVariables {\n  userId: number;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: getUserLists\n// ====================================================\n\nexport interface getUserLists_MediaListCollection_user {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n}\n\nexport interface getUserLists_MediaListCollection_lists_entries_media {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The amount of episodes the anime has when complete\n   */\n  episodes: number | null;\n  /**\n   * The general length of each anime episode in minutes\n   */\n  duration: number | null;\n}\n\nexport interface getUserLists_MediaListCollection_lists_entries {\n  __typename: \"MediaList\";\n  /**\n   * The id of the list entry\n   */\n  id: number;\n  /**\n   * The amount of episodes/chapters consumed by the user\n   */\n  progress: number | null;\n  media: getUserLists_MediaListCollection_lists_entries_media | null;\n}\n\nexport interface getUserLists_MediaListCollection_lists {\n  __typename: \"MediaListGroup\";\n  name: string | null;\n  /**\n   * Media list entries\n   */\n  entries: (getUserLists_MediaListCollection_lists_entries | null)[] | null;\n}\n\nexport interface getUserLists_MediaListCollection {\n  __typename: \"MediaListCollection\";\n  /**\n   * The owner of the list\n   */\n  user: getUserLists_MediaListCollection_user | null;\n  /**\n   * Grouped media list entries\n   */\n  lists: (getUserLists_MediaListCollection_lists | null)[] | null;\n}\n\nexport interface getUserLists {\n  /**\n   * Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.\n   */\n  MediaListCollection: getUserLists_MediaListCollection | null;\n}\n\nexport interface getUserListsVariables {\n  userId: number;\n  type: MediaType;\n  statuses: MediaListStatus[];\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: addEntryToList\n// ====================================================\n\nexport interface addEntryToList_SaveMediaListEntry {\n  __typename: \"MediaList\";\n  /**\n   * The id of the list entry\n   */\n  id: number;\n}\n\nexport interface addEntryToList {\n  /**\n   * Create or update a media list entry\n   */\n  SaveMediaListEntry: addEntryToList_SaveMediaListEntry | null;\n}\n\nexport interface addEntryToListVariables {\n  listNames: string[];\n  mediaId: number;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL mutation operation: removeEntryFromList\n// ====================================================\n\nexport interface removeEntryFromList_DeleteMediaListEntry {\n  __typename: \"Deleted\";\n  /**\n   * If an item has been successfully deleted\n   */\n  deleted: boolean | null;\n}\n\nexport interface removeEntryFromList {\n  /**\n   * Delete a media list entry\n   */\n  DeleteMediaListEntry: removeEntryFromList_DeleteMediaListEntry | null;\n}\n\nexport interface removeEntryFromListVariables {\n  entryId: number;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: searchSeries\n// ====================================================\n\nexport interface searchSeries_Page_media_coverImage {\n  __typename: \"MediaCoverImage\";\n  /**\n   * The cover image url of the media at a large size\n   */\n  large: string | null;\n}\n\nexport interface searchSeries_Page_media_startDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface searchSeries_Page_media_endDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface searchSeries_Page_media_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface searchSeries_Page_media_relations_edges_node_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface searchSeries_Page_media_relations_edges_node {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: searchSeries_Page_media_relations_edges_node_title | null;\n}\n\nexport interface searchSeries_Page_media_relations_edges {\n  __typename: \"MediaEdge\";\n  /**\n   * The type of relation to the parent model\n   */\n  relationType: MediaRelation | null;\n  node: searchSeries_Page_media_relations_edges_node | null;\n}\n\nexport interface searchSeries_Page_media_relations {\n  __typename: \"MediaConnection\";\n  edges: (searchSeries_Page_media_relations_edges | null)[] | null;\n}\n\nexport interface searchSeries_Page_media {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The current releasing status of the media\n   */\n  status: MediaStatus | null;\n  /**\n   * The format the media was released in\n   */\n  format: MediaFormat | null;\n  /**\n   * The amount of episodes the anime has when complete\n   */\n  episodes: number | null;\n  /**\n   * The general length of each anime episode in minutes\n   */\n  duration: number | null;\n  /**\n   * Short description of the media's story and characters\n   */\n  description: string | null;\n  /**\n   * The cover images of the media\n   */\n  coverImage: searchSeries_Page_media_coverImage | null;\n  /**\n   * The first official release date of the media\n   */\n  startDate: searchSeries_Page_media_startDate | null;\n  /**\n   * The last official release date of the media\n   */\n  endDate: searchSeries_Page_media_endDate | null;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: searchSeries_Page_media_title | null;\n  /**\n   * Other media in the same or connecting franchise\n   */\n  relations: searchSeries_Page_media_relations | null;\n}\n\nexport interface searchSeries_Page {\n  __typename: \"Page\";\n  media: (searchSeries_Page_media | null)[] | null;\n}\n\nexport interface searchSeries {\n  Page: searchSeries_Page | null;\n}\n\nexport interface searchSeriesVariables {\n  query: string;\n  type: MediaType;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: searchUserByName\n// ====================================================\n\nexport interface searchUserByName_User_avatar {\n  __typename: \"UserAvatar\";\n  /**\n   * The avatar of user at its largest size\n   */\n  large: string | null;\n  /**\n   * The avatar of user at medium size\n   */\n  medium: string | null;\n}\n\nexport interface searchUserByName_User {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n  /**\n   * The name of the user\n   */\n  name: string;\n  /**\n   * The user's avatar images\n   */\n  avatar: searchUserByName_User_avatar | null;\n  /**\n   * The user's banner images\n   */\n  bannerImage: string | null;\n}\n\nexport interface searchUserByName {\n  /**\n   * User query\n   */\n  User: searchUserByName_User | null;\n}\n\nexport interface searchUserByNameVariables {\n  name: string;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL fragment: SeriesData\n// ====================================================\n\nexport interface SeriesData_coverImage {\n  __typename: \"MediaCoverImage\";\n  /**\n   * The cover image url of the media at a large size\n   */\n  large: string | null;\n}\n\nexport interface SeriesData_startDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface SeriesData_endDate {\n  __typename: \"FuzzyDate\";\n  /**\n   * Numeric Year (2017)\n   */\n  year: number | null;\n  /**\n   * Numeric Month (3)\n   */\n  month: number | null;\n  /**\n   * Numeric Day (24)\n   */\n  day: number | null;\n}\n\nexport interface SeriesData_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface SeriesData_relations_edges_node_title {\n  __typename: \"MediaTitle\";\n  /**\n   * The romanization of the native language title\n   */\n  romaji: string | null;\n  /**\n   * The official english title\n   */\n  english: string | null;\n  /**\n   * Official title in it's native language\n   */\n  native: string | null;\n}\n\nexport interface SeriesData_relations_edges_node {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: SeriesData_relations_edges_node_title | null;\n}\n\nexport interface SeriesData_relations_edges {\n  __typename: \"MediaEdge\";\n  /**\n   * The type of relation to the parent model\n   */\n  relationType: MediaRelation | null;\n  node: SeriesData_relations_edges_node | null;\n}\n\nexport interface SeriesData_relations {\n  __typename: \"MediaConnection\";\n  edges: (SeriesData_relations_edges | null)[] | null;\n}\n\nexport interface SeriesData {\n  __typename: \"Media\";\n  /**\n   * The id of the media\n   */\n  id: number;\n  /**\n   * The current releasing status of the media\n   */\n  status: MediaStatus | null;\n  /**\n   * The format the media was released in\n   */\n  format: MediaFormat | null;\n  /**\n   * The amount of episodes the anime has when complete\n   */\n  episodes: number | null;\n  /**\n   * The general length of each anime episode in minutes\n   */\n  duration: number | null;\n  /**\n   * Short description of the media's story and characters\n   */\n  description: string | null;\n  /**\n   * The cover images of the media\n   */\n  coverImage: SeriesData_coverImage | null;\n  /**\n   * The first official release date of the media\n   */\n  startDate: SeriesData_startDate | null;\n  /**\n   * The last official release date of the media\n   */\n  endDate: SeriesData_endDate | null;\n  /**\n   * The official titles of the media in various languages\n   */\n  title: SeriesData_title | null;\n  /**\n   * Other media in the same or connecting franchise\n   */\n  relations: SeriesData_relations | null;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL fragment: UserData\n// ====================================================\n\nexport interface UserData_avatar {\n  __typename: \"UserAvatar\";\n  /**\n   * The avatar of user at its largest size\n   */\n  large: string | null;\n  /**\n   * The avatar of user at medium size\n   */\n  medium: string | null;\n}\n\nexport interface UserData {\n  __typename: \"User\";\n  /**\n   * The id of the user\n   */\n  id: number;\n  /**\n   * The name of the user\n   */\n  name: string;\n  /**\n   * The user's avatar images\n   */\n  avatar: UserData_avatar | null;\n  /**\n   * The user's banner images\n   */\n  bannerImage: string | null;\n}\n\n/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\n/**\n * The format the media was released in\n */\nexport enum MediaFormat {\n  MANGA = \"MANGA\",\n  MOVIE = \"MOVIE\",\n  MUSIC = \"MUSIC\",\n  NOVEL = \"NOVEL\",\n  ONA = \"ONA\",\n  ONE_SHOT = \"ONE_SHOT\",\n  OVA = \"OVA\",\n  SPECIAL = \"SPECIAL\",\n  TV = \"TV\",\n  TV_SHORT = \"TV_SHORT\",\n}\n\n/**\n * Media list watching/reading status enum.\n */\nexport enum MediaListStatus {\n  COMPLETED = \"COMPLETED\",\n  CURRENT = \"CURRENT\",\n  DROPPED = \"DROPPED\",\n  PAUSED = \"PAUSED\",\n  PLANNING = \"PLANNING\",\n  REPEATING = \"REPEATING\",\n}\n\n/**\n * Type of relation media has to its parent.\n */\nexport enum MediaRelation {\n  ADAPTATION = \"ADAPTATION\",\n  ALTERNATIVE = \"ALTERNATIVE\",\n  CHARACTER = \"CHARACTER\",\n  COMPILATION = \"COMPILATION\",\n  CONTAINS = \"CONTAINS\",\n  OTHER = \"OTHER\",\n  PARENT = \"PARENT\",\n  PREQUEL = \"PREQUEL\",\n  SEQUEL = \"SEQUEL\",\n  SIDE_STORY = \"SIDE_STORY\",\n  SOURCE = \"SOURCE\",\n  SPIN_OFF = \"SPIN_OFF\",\n  SUMMARY = \"SUMMARY\",\n}\n\n/**\n * The current releasing status of the media\n */\nexport enum MediaStatus {\n  CANCELLED = \"CANCELLED\",\n  FINISHED = \"FINISHED\",\n  HIATUS = \"HIATUS\",\n  NOT_YET_RELEASED = \"NOT_YET_RELEASED\",\n  RELEASING = \"RELEASING\",\n}\n\n/**\n * Media type enum, anime or manga.\n */\nexport enum MediaType {\n  ANIME = \"ANIME\",\n  MANGA = \"MANGA\",\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n"],"names":["MediaFormat","MANGA","MOVIE","MUSIC","NOVEL","ONA","ONE_SHOT","OVA","SPECIAL","TV","TV_SHORT","MediaListStatus","COMPLETED","CURRENT","DROPPED","PAUSED","PLANNING","REPEATING","MediaRelation","ADAPTATION","ALTERNATIVE","CHARACTER","COMPILATION","CONTAINS","OTHER","PARENT","PREQUEL","SEQUEL","SIDE_STORY","SOURCE","SPIN_OFF","SUMMARY","MediaStatus","CANCELLED","FINISHED","HIATUS","NOT_YET_RELEASED","RELEASING","MediaType","ANIME"],"mappings":"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"}