{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/services/AnilistClientService.ts"],"sourcesContent":["import {InjectContext, Service} from \"@tsed/di\";\nimport {ApolloClient, DocumentNode} from \"apollo-boost\";\nimport {$log, Constant, Inject, PlatformContext} from \"@tsed/common\";\nimport {Env} from \"@tsed/core\";\nimport {PlatformCache} from \"@tsed/platform-cache\";\nimport {ApolloClientBuilder} from \"../lib/ApolloClientBuilder\";\nimport {GraphQLError} from \"graphql\";\nimport {AnilistError} from \"@anistats/anilist\";\nimport {createHash} from \"crypto\";\nimport {Mutexes} from \"../lib/MutexManager\";\n\n@Service()\nexport class AnilistClientService\n{\n    public static readonly ENDPOINT = \"https://graphql.anilist.co\";\n\n    protected apollo: ApolloClient<any>;\n\n    @Constant(\"env\")\n    protected env!: Env;\n\n    @InjectContext()\n    protected $ctx?: PlatformContext;\n\n    @Inject()\n    protected cache!: PlatformCache;\n\n    constructor()\n    {\n        const builder = new ApolloClientBuilder(AnilistClientService.ENDPOINT);\n        builder.withAuth(() => this.token);\n        this.apollo = builder.build();\n    }\n\n    public get token(): string | null\n    {\n        try {\n            return this.$ctx?.getRequest?.()?.session?.anilist_token ?? null;\n        } catch(e) {\n            $log.warn(e);\n\n            return null;\n        }\n    }\n\n    protected createError(errors: ReadonlyArray<GraphQLError>)\n    {\n        const errorMessage = errors.map((e: GraphQLError) => `GraphQLError/${e.name}: ${e.message}`).join(\"\\n\");\n        return new AnilistError(errorMessage, errors);\n    }\n\n    protected hashObject(namespace: string, obj: any): string\n    {\n        const hash = createHash('md5')\n            .update(JSON.stringify(obj))\n            .digest('hex');\n\n        return `${namespace}:${hash}`;\n    }\n\n    public async query<T, Q, S = T>(settings: { query: DocumentNode, variables?: Q, key: string, hash?: any, ttl?: number, convert?: (val: T) => S }): Promise<S> | never\n    {\n        const queryFn = async () => {\n            try {\n                const {data, errors} = await this.apollo.query<T, Q>({\n                    query: settings.query,\n                    variables: settings.variables,\n\n                    fetchPolicy: \"network-only\",\n                    errorPolicy: \"ignore\"\n                });\n\n                if (errors) {\n                    $log.error(data);\n                    throw this.createError(errors!);\n                }\n\n                if (settings.convert) {\n                    return settings.convert(data);\n                }\n\n                return data as unknown as S;\n            } catch(e) {\n                $log.error(e);\n                throw e;\n            }\n        };\n\n        if (settings.variables ?? settings.hash) {\n            // Can use a cache key\n            const cacheKey = this.hashObject(settings.key, settings.variables ?? settings.hash);\n\n            const mut = Mutexes.getMutex(cacheKey);\n\n            return mut.runExclusive(async () => {\n                return this.cache.wrap(cacheKey, () => {\n                    return queryFn();\n                }, settings.ttl ?? 30);\n            });\n        }\n\n        return queryFn();\n    }\n\n    public async mutate<T, Q, S = T>(settings: { mutation: DocumentNode, variables?: Q, convert?: (val: T | null | undefined) => S | null | undefined }): Promise<S | null | undefined> | never\n    {\n        try {\n            const {data, errors} = await this.apollo.mutate<T, Q>({\n                mutation: settings.mutation,\n                variables: settings.variables,\n\n                fetchPolicy: \"no-cache\",\n                errorPolicy: \"ignore\",\n            });\n\n            if(errors) {\n                throw this.createError(errors!);\n            }\n\n            if (settings.convert) {\n                return settings.convert(data);\n            }\n\n            return data as unknown as S;\n        } catch(e) {\n            $log.error(e);\n            throw e;\n        }\n    }\n}"],"names":["AnilistClientService","builder","ApolloClientBuilder","ENDPOINT","withAuth","token","apollo","build","createError","errors","errorMessage","map","e","name","message","join","AnilistError","hashObject","namespace","obj","hash","createHash","update","JSON","stringify","digest","query","settings","queryFn","cacheKey","mut","data","variables","fetchPolicy","errorPolicy","$log","error","convert","key","Mutexes","getMutex","runExclusive","cache","wrap","ttl","mutate","mutation","$ctx","getRequest","session","anilist_token","warn","Constant","InjectContext","Inject","Service"],"mappings":"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"}