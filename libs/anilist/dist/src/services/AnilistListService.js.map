{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/services/AnilistListService.ts"],"sourcesContent":["import {Inject, Service} from \"@tsed/di\";\nimport {AnilistClientService} from \"./AnilistClientService\";\nimport addEntryToListQuery from \"../gql/mutation/addEntryToList.gql\";\nimport {\n    addEntryToList, addEntryToListVariables, AnilistService, CustomListJson,\n    getListsContainingMediaId, getListsContainingMediaIdVariables, removeEntryFromList, removeEntryFromListVariables\n} from \"..\";\n\nimport getListsContainingMediaIdQuery from \"../gql/getListsContainingMediaId.gql\";\n\n@Service()\nexport class AnilistListService\n{\n    @Inject()\n    protected client!: AnilistClientService;\n\n    @Inject()\n    protected baseService!: AnilistService;\n\n    public async addEntry(listName: string, mediaId: number): Promise<number | null | undefined>\n    {\n        const currentUser = await this.baseService.getCurrentUser();\n\n        if (!currentUser) {\n            throw new Error(`Can't add list to user as we are not authenticated`);\n        }\n\n        const originalListNames = await this.getListsContainingMediaId(currentUser.id, mediaId);\n\n        // Add Entry to lists\n        return this.client.mutate<addEntryToList, addEntryToListVariables, number>({\n            mutation: addEntryToListQuery,\n            variables: {\n                listNames: [...originalListNames, listName],\n                mediaId,\n            },\n\n            convert: (val) => val?.SaveMediaListEntry?.id ?? null,\n        });\n    }\n\n    public async removeEntry(listName: string, mediaId: number): Promise<void>\n    {\n        const currentUser = await this.baseService.getCurrentUser();\n\n        if (!currentUser) {\n            console.log('NO CURRENT USER');\n            throw new Error(`Can't remove list entry from user as we are not authenticated`);\n        }\n\n        const originalListNames = await this.getListsContainingMediaId(currentUser.id, mediaId);\n\n        // Add Entry to lists\n        await this.client.mutate<addEntryToList, addEntryToListVariables, number>({\n            mutation: addEntryToListQuery,\n            variables: {\n                listNames: originalListNames.filter((originalListName) => originalListName !== listName),\n                mediaId,\n            },\n        });\n    }\n\n    public async getListsContainingMediaId(userId: number, mediaId: number): Promise<Array<string>>\n    {\n        const lists = await this.client.query<getListsContainingMediaId, getListsContainingMediaIdVariables, Array<string>>({\n            query: getListsContainingMediaIdQuery,\n            variables: {\n                userId,\n                mediaId,\n            },\n\n            key: 'getListsContainingMediaId',\n            convert: (val) =>\n                val.MediaList!.customLists\n                    ?.filter((list: CustomListJson) => list.enabled)\n                    ?.map((list: CustomListJson) => list.name),\n        });\n\n        if (!lists) {\n            throw new Error(`Failed to fetch lists containing ${mediaId} on user ${userId}`);\n        }\n\n        return lists;\n    }\n}\n"],"names":["AnilistListService","addEntry","listName","mediaId","currentUser","originalListNames","val","baseService","getCurrentUser","Error","getListsContainingMediaId","id","client","mutate","mutation","addEntryToListQuery","variables","listNames","convert","SaveMediaListEntry","removeEntry","console","log","filter","originalListName","userId","lists","query","getListsContainingMediaIdQuery","key","MediaList","customLists","list","enabled","map","name","Inject","Service"],"mappings":"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"}