{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/services/AnilistOAuthService.ts"],"sourcesContent":["/**\n * Helper for anilist OAuth\n */\nimport { $log } from \"@tsed/common\";\nimport {Constant} from \"@tsed/di\";\nimport fetch from \"node-fetch\";\n\n\nexport class AnilistOAuthService\n{\n    @Constant(\"ANILIST_CLIENT_ID\")\n    protected readonly clientId!: string;\n\n    @Constant(\"ANILIST_CLIENT_SECRET\")\n    protected readonly clientSecret!: string;\n\n    getAuthorizeUri(externalUri: string): string\n    {\n        const sp = new URLSearchParams();\n        sp.append(\"client_id\", this.clientId);\n        sp.append(\"redirect_uri\", externalUri);\n        sp.append(\"response_type\", \"code\");\n\n        return `https://anilist.co/api/v2/oauth/authorize?${sp.toString()}`;\n    }\n\n    async getToken(code: string, externalUri: string): Promise<string | null>\n    {\n        const response = await fetch(\"https://anilist.co/api/v2/oauth/token\", {\n            method: \"POST\",\n\n            headers: {\n                'Content-Type': \"application/json\",\n                'Accept': \"application/json\",\n            },\n\n            body: JSON.stringify({\n                grant_type: 'authorization_code',\n                client_id: this.clientId,\n                client_secret: this.clientSecret,\n                redirect_uri: externalUri,\n\n                code,\n            }),\n        });\n\n        $log.info(`Anilist Token Response: ${response.status}`);\n\n        const jsonResponse = await response.json() as { access_token?: string };\n\n        if(response.status > 200) {\n            $log.warn(jsonResponse);\n\n            return null;\n        }\n\n        if(!jsonResponse.access_token)\n            return null;\n\n        return jsonResponse.access_token;\n    }\n}"],"names":["AnilistOAuthService","getAuthorizeUri","externalUri","sp","URLSearchParams","append","clientId","toString","getToken","code","response","jsonResponse","fetch","method","headers","body","JSON","stringify","grant_type","client_id","client_secret","clientSecret","redirect_uri","$log","info","status","json","warn","access_token","Constant"],"mappings":"AAGA;;;;+BAKaA;;;eAAAA;;;sBARb;;CAEC,GACoB;kBACE;gDACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGX,IAAA,AAAMA,oCART,AAQG;;aAAMA;8BAAAA;;iBAAAA;IAQTC,OAAAA,eAQC,GARDA,SAAAA,gBAAgBC,WAAmB,EACnC;QACI,IAAMC,KAAK,IAAIC;QACfD,GAAGE,MAAM,CAAC,aAAa,IAAI,CAACC,QAAQ;QACpCH,GAAGE,MAAM,CAAC,gBAAgBH;QAC1BC,GAAGE,MAAM,CAAC,iBAAiB;QAE3B,OAAO,AAAC,6CAA0D,OAAdF,GAAGI,QAAQ;IACnE;IAEA,OAAMC,QAkCL,GAlCD,SAAMA,SAASC,IAAY,EAAEP,WAAmB;;eAAhD,kBAAA,WACA;gBACUQ,UAoBAC;;;;wBApBW;;4BAAMC,IAAAA,kBAAK,EAAC,yCAAyC;gCAClEC,QAAQ;gCAERC,SAAS;oCACL,gBAAgB;oCAChB,UAAU;gCACd;gCAEAC,MAAMC,KAAKC,SAAS,CAAC;oCACjBC,YAAY;oCACZC,WAAW,MAAKb,QAAQ;oCACxBc,eAAe,MAAKC,YAAY;oCAChCC,cAAcpB;oCAEdO,MAAAA;gCACJ;4BACJ;;;wBAhBMC,WAAW;wBAkBjBa,eAAI,CAACC,IAAI,CAAC,AAAC,2BAA0C,OAAhBd,SAASe,MAAM;wBAE/B;;4BAAMf,SAASgB,IAAI;;;wBAAlCf,eAAe;wBAErB,IAAGD,SAASe,MAAM,GAAG,KAAK;4BACtBF,eAAI,CAACI,IAAI,CAAChB;4BAEV;;gCAAO,IAAI;;wBACf,CAAC;wBAED,IAAG,CAACA,aAAaiB,YAAY,EACzB;;4BAAO,IAAI;;wBAEf;;4BAAOjB,aAAaiB,YAAY;;;;QACpC;;WApDS5B;;;IAER6B,IAAAA,YAAQ,EAAC;;GAFD7B;;IAKR6B,IAAAA,YAAQ,EAAC;;GALD7B"}