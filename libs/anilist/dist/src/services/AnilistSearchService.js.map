{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/services/AnilistSearchService.ts"],"sourcesContent":["import {Service} from \"@tsed/di\";\nimport {Inject} from \"@tsed/common\";\nimport {AnilistClientService} from \"./AnilistClientService\";\nimport {\n    AnilistNotAUserError,\n    IAnilistUser, MediaType,\n} from \"..\";\nimport searchUserByNameQuery from \"../gql/searchUserByName.gql\";\nimport searchSeriesQuery from \"../gql/searchSeries.gql\";\n\nimport {\n    searchUserByName, searchUserByNameVariables,\n    searchSeries, searchSeriesVariables, searchSeries_Page_media,\n} from \"../generated/types\";\n\n@Service()\nexport class AnilistSearchService\n{\n    @Inject()\n    private client!: AnilistClientService;\n\n    // @TODO: Inject Cache Config (TTL)\n    protected get cacheConfig() {\n        return {\n            ttl: {\n                searchUserByName: 600,\n                getUserById: 600,\n\n                fetchUserLists: 180,\n                getUserLists: 180,\n\n                currentUser: 3600,\n                findUsersByName: 3600,\n\n                searchSeries: 3600,\n            },\n        };\n    }\n\n    async searchUserByName(userName: string): Promise<IAnilistUser | never>\n    {\n        const user = await this.client.query<searchUserByName, searchUserByNameVariables, searchUserByName['User']>({\n            query: searchUserByNameQuery,\n            variables: { name: userName },\n            key: 'searchUserByName',\n            ttl: this.cacheConfig.ttl.searchUserByName,\n            convert: (data) => data.User,\n        });\n\n        if(!user || !user.id)\n            throw new AnilistNotAUserError(`User \"${userName}\" does not exist on AniList`);\n\n        return {\n            id: user.id,\n            name: user.name,\n\n            avatar: {\n                large: user!.avatar!.large ?? user!.avatar!.medium!,\n            },\n        };\n    }\n\n    async searchSeriesByName(query: string, type: MediaType): Promise<Array<searchSeries_Page_media>>\n    {\n        return this.client.query<searchSeries, searchSeriesVariables, Array<searchSeries_Page_media>>({\n            query: searchSeriesQuery,\n            variables: { query, type, },\n            key: 'searchSeries',\n            ttl: this.cacheConfig.ttl.searchSeries,\n            convert: (data) => data.Page!.media! as Array<searchSeries_Page_media>,\n        });\n    }\n}\n"],"names":["AnilistSearchService","searchUserByName","userName","user","client","query","searchUserByNameQuery","variables","name","key","ttl","cacheConfig","convert","data","User","id","AnilistNotAUserError","avatar","large","medium","searchSeriesByName","type","searchSeriesQuery","searchSeries","Page","media","getUserById","fetchUserLists","getUserLists","currentUser","findUsersByName","Inject","Service"],"mappings":"AAAA;;;;+BAgBaA;;;eAAAA;;;kBAhBS;sBACD;oCACc;gBAI5B;0DAC2B;sDACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQjBA,qCAAN;;;;;;IAuBH,OAAMC,gBAqBL,GArBD,SAAMA,iBAAiBC,QAAgB;;eAAvC,kBAAA,WACA;gBACUC,MAgBSA;;;;wBAhBF;;4BAAM,MAAKC,MAAM,CAACC,KAAK,CAAwE;gCACxGA,OAAOC,4BAAqB;gCAC5BC,WAAW;oCAAEC,MAAMN;gCAAS;gCAC5BO,KAAK;gCACLC,KAAK,MAAKC,WAAW,CAACD,GAAG,CAACT,gBAAgB;gCAC1CW,SAAS,SAACC;2CAASA,KAAKC,IAAI;;4BAChC;;;wBANMX,OAAO;wBAQb,IAAG,CAACA,QAAQ,CAACA,KAAKY,EAAE,EAChB,MAAM,IAAIC,sBAAoB,CAAC,AAAC,SAAiB,OAATd,UAAS,gCAA8B;wBAEnF;;4BAAO;gCACHa,IAAIZ,KAAKY,EAAE;gCACXP,MAAML,KAAKK,IAAI;gCAEfS,QAAQ;oCACJC,OAAOf,CAAAA,qBAAAA,KAAMc,MAAM,CAAEC,KAAK,cAAnBf,gCAAAA,qBAAuBA,KAAMc,MAAM,CAAEE,MAAM,AAAC;gCACvD;4BACJ;;;;QACJ;;IAEA,OAAMC,kBASL,GATD,SAAMA,mBAAmBf,KAAa,EAAEgB,IAAe;;eAAvD,kBAAA,WACA;;gBACI;;oBAAO,MAAKjB,MAAM,CAACC,KAAK,CAAsE;wBAC1FA,OAAOiB,wBAAiB;wBACxBf,WAAW;4BAAEF,OAAAA;4BAAOgB,MAAAA;wBAAM;wBAC1BZ,KAAK;wBACLC,KAAK,MAAKC,WAAW,CAACD,GAAG,CAACa,YAAY;wBACtCX,SAAS,SAACC;mCAASA,KAAKW,IAAI,CAAEC,KAAK;;oBACvC;;;QACJ;;;;YAjDcd,KAAAA;iBAAd,AADA,mCAAmC;YACnC,eAA4B;gBACxB,OAAO;oBACHD,KAAK;wBACDT,kBAAkB;wBAClByB,aAAa;wBAEbC,gBAAgB;wBAChBC,cAAc;wBAEdC,aAAa;wBACbC,iBAAiB;wBAEjBP,cAAc;oBAClB;gBACJ;YACJ;;;;;;IAnBCQ,IAAAA,cAAM;qCACU,0CAAoB,4BAApB,0CAAoB;GAH5B/B;AAAAA;IADZgC,IAAAA,WAAO;GACKhC"}