{"version":3,"sources":["../../../../../libs-anilist.old/anilist/src/services/AnilistService.ts"],"sourcesContent":["import {ProviderScope, Scope, Service, $log, Inject, Constant} from \"@tsed/common\";\nimport { Env } from \"@tsed/core\";\n\nimport {IAnilistApi} from \"./IAnilistApi\";\nimport {AnilistNotAUserError} from \"../AnilistNotAUserError\";\n\nimport getUserByIdQuery from \"../gql/getUserById.gql\";\nimport searchUserByNameQuery from \"../gql/searchUserByName.gql\";\nimport getCurrentUser from \"../gql/getCurrentUser.gql\";\nimport getUserListsQuery from \"../gql/getUserLists.gql\";\nimport fetchUserListsQuery from \"../gql/fetchUserLists.gql\";\nimport findUsersByNameQuery from \"../gql/findUsersByName.gql\";\n\nimport {\n    fetchUserLists, fetchUserListsVariables,\n    getUserLists, getUserListsVariables,\n\tfindUsersByName, findUsersByNameVariables,\n\tgetUserById, getUserByIdVariables,\n\tfetchUserLists_MediaListCollection_lists,\n\tfindUsersByName_Page_users,\n\tMediaListStatus, MediaType\n} from \"../generated/types\";\n\nimport {AnilistClientService} from \"./AnilistClientService\";\n\n@Service()\n@Scope(ProviderScope.REQUEST)\nexport class AnilistService implements IAnilistApi\n{\n\t@Inject()\n    protected client!: AnilistClientService;\n\n\t@Constant(\"env\")\n\tprotected env!: Env;\n\n\t// @TODO: Inject Cache Config (TTL)\n\tprotected get cacheConfig() {\n\t\treturn {\n\t\t\tttl: {\n\t\t\t\tsearchUserByName: 600,\n\t\t\t\tgetUserById: 600,\n\n\t\t\t\tfetchUserLists: 180,\n\t\t\t\tgetUserLists: 180,\n\n\t\t\t\tcurrentUser: 3600,\n\t\t\t\tfindUsersByName: 3600,\n\t\t\t},\n\t\t};\n\t}\n\n    constructor()\n    {\n    }\n\n    async fetchUserLists(userId: number, type: MediaType, statuses?: MediaListStatus | Array<MediaListStatus>): Promise<fetchUserLists> | never\n    {\n        $log.info(`AnilistService.fetchUserLists(${userId}, ${type}, [${statuses}])`);\n\n        // Normalize Statuses\n        if (typeof statuses === \"undefined\")\n            statuses = Object.values(MediaListStatus);\n\n        if (!Array.isArray(statuses))\n            statuses = [statuses];\n\n        return this.client.query<fetchUserLists, fetchUserListsVariables>({\n\t\t\tquery: fetchUserListsQuery,\n\t\t\tvariables: { userId, type, statuses },\n\t\t\tkey: 'fetchUserLists',\n\t\t\tttl: this.cacheConfig.ttl.fetchUserLists,\n\n\t\t\t// @hack: using a convert function to log some data is not very semantic\n\t\t\tconvert: (data) => {\n\t\t\t\tif(this.env === Env.DEV) {\n\t\t\t\t\tconst len = new TextEncoder().encode(JSON.stringify(data)).byteLength\n\t\t\t\t\t$log.info(`We just nuked anilist to get ~${(len / 1024 / 1024).toFixed(1)}MB of data`);\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t},\n\t\t});\n    }\n\n    async getUserLists(userId: number, type: MediaType, statuses?: MediaListStatus | Array<MediaListStatus>): Promise<getUserLists> | never\n    {\n        $log.info(`AnilistService.getUserLists(${userId}, ${type}, ${statuses})`);\n\n        // Normalize Statuses\n        if (typeof statuses === \"undefined\")\n            statuses = Object.values(MediaListStatus);\n\n        if (!Array.isArray(statuses))\n            statuses = [statuses];\n\n        return this.client.query<getUserLists, getUserListsVariables>({\n\t\t\tquery: getUserListsQuery,\n\t\t\tvariables: { userId, type, statuses },\n\t\t\tkey: 'getUserLists',\n\t\t\tttl: this.cacheConfig.ttl.getUserLists,\n\t\t});\n    }\n\n    async getUserList(userId: number, type: MediaType, name: string): Promise<fetchUserLists_MediaListCollection_lists> | never\n    {\n        $log.info(\"AnilistService.getUserList()\");\n\n        const lists = await this.fetchUserLists(userId, type);\n\n        return lists.MediaListCollection?.lists?.find(list => list?.name === name)!;\n    }\n\n    async getCurrentUser(): Promise<IAnilistUser | null>\n    {\n        if(!this.client.token)\n            return null;\n\n        $log.info(\"AnilistService.getCurrentUser()\");\n\n\t\t// @TODO: Fix typing\n\t\tconst viewer = await this.client.query<any, any, any>({\n\t\t\tquery: getCurrentUser,\n\t\t\tkey: 'currentUser',\n\t\t\thash: this.client.token,\n\t\t\tttl: this.cacheConfig.ttl.currentUser,\n\t\t\tconvert: (data) => data.Viewer,\n\t\t});\n\n        return {\n            id: viewer.id,\n            name: viewer.name,\n\n            avatar: {\n                large: viewer.avatar.large,\n            },\n        };\n    }\n\n    async getUserById(userId: number): Promise<IAnilistUser>\n    {\n    \t$log.info(\"Fetching user by userId\", { userId });\n\n    \tconst user = await this.client.query<getUserById, getUserByIdVariables, getUserById['User']>({\n\t\t\tquery: getUserByIdQuery,\n\t\t\tvariables: { userId },\n\t\t\tkey: 'getUserById',\n\t\t\tttl: this.cacheConfig.ttl.getUserById,\n\t\t\tconvert: (data) => data.User,\n\t\t});\n\n        if(!user || !user.id)\n            throw new AnilistNotAUserError(`User \"${userId}\" does not exist on AniList`);\n\n        return {\n            id: user.id,\n            name: user.name,\n\n            avatar: {\n                large: user!.avatar!.large ?? user!.avatar!.medium!,\n            },\n        };\n    }\n\n    async findUsersByName(username: string): Promise<Array<IAnilistUser>>\n\t{\n\t\tconst users = await this.client.query<findUsersByName, findUsersByNameVariables, Array<null | findUsersByName_Page_users>>({\n\t\t\tquery: findUsersByNameQuery,\n\t\t\tvariables: { query: username, page: 0, perPage: 10 },\n\t\t\tkey: 'findUsersByName',\n\t\t\tttl: this.cacheConfig.ttl.findUsersByName,\n\t\t\tconvert: (data) => data!.Page!.users!,\n\t\t});\n\n\t\treturn users.map((gqlUser) => {\n\t\t\treturn {\n\t\t\t\tid: gqlUser!.id,\n\t\t\t\tname: gqlUser!.name,\n\n\t\t\t\tavatar: {\n\t\t\t\t\tlarge: gqlUser!.avatar!.large! ?? gqlUser!.avatar!.medium!,\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport interface IAnilistUser\n{\n    id: number;\n\n    name: string;\n\n    avatar: { large: string };\n}\n"],"names":["AnilistService","fetchUserLists","userId","type","statuses","$log","info","Object","values","MediaListStatus","Array","isArray","client","query","fetchUserListsQuery","variables","key","ttl","cacheConfig","convert","data","env","Env","DEV","len","TextEncoder","encode","JSON","stringify","byteLength","toFixed","getUserLists","getUserListsQuery","getUserList","name","lists","MediaListCollection","find","list","getCurrentUser","viewer","token","hash","currentUser","Viewer","id","avatar","large","getUserById","user","getUserByIdQuery","User","AnilistNotAUserError","medium","findUsersByName","username","users","findUsersByNameQuery","page","perPage","Page","map","gqlUser","searchUserByName","Inject","Constant","Service","Scope","ProviderScope","REQUEST"],"mappings":"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"}